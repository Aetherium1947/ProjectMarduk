#ifndef LIBIM_WORLD_SER_COMMON_H
#define LIBIM_WORLD_SER_COMMON_H
#include <array>
#include <string_view>
#include <optional>

namespace libim::content::asset {
    static constexpr std::string_view kFileCopyright = {
        "................................" \
        "................@...@...@...@..." \
        ".............@...@..@..@...@...." \
        "................@.@.@.@.@.@....." \
        "@@@@@@@@......@...........@....." \
        "@@@@@@@@....@@......@@@....@...." \
        "@@.....@.....@......@@@.....@@.." \
        "@@.@@@@@......@.....@@@......@@." \
        "@@@@@@@@.......@....@@.....@@..." \
        "@@@@@@@@.........@@@@@@@@@@....." \
        "@@@@@@@@..........@@@@@@........" \
        "@@.....@..........@@@@@........." \
        "@@.@@@@@.........@@@@@@........." \
        "@@.....@.........@@@@@@........." \
        "@@@@@@@@.........@@@@@@........." \
        "@@@@@@@@.........@@@@@@@........" \
        "@@@...@@.........@@@@@@@........" \
        "@@.@@@.@.........@.....@........" \
        "@@..@..@........@.......@......." \
        "@@@@@@@@........@.......@......." \
        "@@@@@@@@.......@........@......." \
        "@@..@@@@.......@........@......." \
        "@@@@..@@......@.........@......." \
        "@@@@.@.@......@.........@......." \
        "@@....@@........................" \
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" \
        "@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@" \
        "@@.@@..@@@@@..@@@@@@@@@@.@@@@@@@" \
        "@@.@.@.@@@@.@.@@@.@..@@...@@@..@" \
        "@@..@@@@@@....@@@..@@@@@.@@@@.@@" \
        "@@@@@@@@...@@.@@@.@@@@@..@@...@@" \
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" \
        "@.(c).lucasarts.entertainment..@" \
        "@.........company.llc..........@" \
        "@....(c).lucasfilm.ltd.&.tm....@" \
        "@.....all.rights.reserved......@" \
        "@...used.under.authorization...@" \
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    };

    inline std::optional<std::size_t> make_optional_idx(int32_t idx)
    {
        return idx > -1 ? std::make_optional(static_cast<std::size_t>(idx)) : std::nullopt;
    }

    inline int32_t from_optional_idx(std::optional<std::size_t> idx)
    {
        return idx.has_value() ? static_cast<int32_t>(idx.value()) : -1;
    }
}
#endif // LIBIM_WORLD_SER_COMMON_H
